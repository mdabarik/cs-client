SDLC: Software Development Life Cycle

Clean Co Service
Requirement Analysis:

User:
# Can login & logout (firebase)
# Can book services
# Can cancel services

Tech Stack:
# Frontend:
  # React
  # Tailwind CSS
  # DaisyUI

# Backend
  # Express
  # MongoDB

API Design
  # /api/v1 (old version)
  # /api/v2 (new version)

Services:
  # /api/v1/services (GET)

Users:
  # /api/v1/user/create-booking (POST)
  # /api/v1/user/cancel-booking (DELETE)

Auth
  # /api/v1/auth/access-token (POST)
  # /api/v1/auth/logout


//////////////// Font End ////////////////
1. wireframe (basic structures of website)



Fetch vs axios
# why axios?
1. Increases DX (developer experience)
2. We can use baseURL for (axios) but can't use for (fetch)
3. We can use interceptor (we can capture, client to backend response inbetween)
4. Logout if response give 401 (unauthorized) [interceptor]

# Why tanstack query?
1. Data fetching - not too good. We use normally fetch to fetch data (side effect) [useEffect]
2. Tanstack query || (Redux RTK) || (SWR Vercel)
3. React Router Dom [Fetch Data After React Router DOM]
4. useQuery || useMutation
